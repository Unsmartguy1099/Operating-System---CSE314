diff --git a/Makefile b/Makefile
index 39a99d7..151b273 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8c8f967 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+//&---------------------------------------
+int             thread_create(uint64 func, uint64 arg, uint64 stack);
+void            thread_join(int pid);
+void            thread_freepagetable(pagetable_t pagetable, uint64 sz);
+//&-------------------------------------
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,6 +170,9 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+//&--------------------------------------------------------
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+//&--------------------------------------------------------
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..e44636c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -158,8 +158,13 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  //&------------------------------------------
+  if(p->pagetable){
+    if(p->is_thread == 0)
+      proc_freepagetable(p->pagetable, p->sz);
+    else if(p->is_thread == 1)
+      thread_freepagetable(p->pagetable, p->sz);}
+  //&------------------------------------------  
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -215,6 +220,13 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+//&----------------------------------
+void thread_freepagetable(pagetable_t pagetable, uint64 sz){
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+}
+//&----------------------------------
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -309,6 +321,9 @@ fork(void)
   np->cwd = idup(p->cwd);
 
   safestrcpy(np->name, p->name, sizeof(p->name));
+  //&-Ensuring that proc is differentiated from thread
+  np->is_thread = 0;
+  //&-------------------------------------------------
 
   pid = np->pid;
 
@@ -325,6 +340,68 @@ fork(void)
   return pid;
 }
 
+
+// Create a new thread, copying the parent.
+// same as fork but instead  of creating a new pagetable, just assign the parent's pagetable into the new process
+
+int
+thread_create(uint64 func, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){  // used uvmmirror here to assign p->pagetable to np->pagetable
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+ // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+ //&------------------
+  p->trapframe->a0 = np->pid;
+  np->is_thread = 1;
+  np->trapframe->sp = stack + PGSIZE - sizeof(void *);
+  np->trapframe->a0 = arg;
+  np->trapframe->a1 = stack;
+  np->trapframe->epc = func; // start runnning the process-> thread from here
+  if(copyout(p->pagetable, stack - sizeof(void *), (char *)&arg, sizeof(arg)) < 0)
+    return -1;
+  //&-------------------
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -434,6 +511,54 @@ wait(uint64 addr)
   }
 }
 
+void 
+thread_join(int pid)
+{
+  struct proc *pp;
+  int havekids;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      //&---------------------------------------
+      if(pp->parent == p && pp->is_thread == 1 && pp->pid == pid){
+      //&---------------------------------------  
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          //&------
+          //& 
+          //&------
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return ;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return ;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..10bc2f6 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+//&----------------------------------------
+  struct spinlock memlock;	// find places to set and release the locks 
+  int is_thread;               // if it is thread
+  int mem_id;                   // All threads will have the same physical pages with the mothrer, hence the same memory ID
+//&----------------------------------------
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..921f3ac 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+//&-----------------------------------
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+//&-----------------------------------
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+//&----------------------------------
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit
+//&----------------------------------
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..ca1f571 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+//&--------------------------
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+//&-------------------------
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..34ab03a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,29 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//&_int thread_create(void(*fcn)(void*), void *arg, void*stack)
+uint64 sys_thread_create(void){
+  uint64 func;
+  uint64 arg;
+  uint64 stack;
+  argaddr(0,&func);
+  argaddr(1,&arg);
+  argaddr(2,&stack);
+  return thread_create(func,arg,stack);
+}
+
+//&_int thread_join(int thread_id)
+uint64 sys_thread_join(void){
+  int thread_id;
+  argint(0,&thread_id);
+  thread_join(thread_id);
+  return 0;
+}
+
+//&_void thread_exit(void)
+uint64 sys_thread_exit(void){
+  exit(0);
+  return 0;
+}
+//&----------------------------------
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..d6322fc 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -332,6 +332,39 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+//&--------------------------------------------------------
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //& char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    //&------
+    //& if((mem = kalloc()) == 0)
+    //& goto err;
+    //& memmove(mem, (char*)pa, PGSIZE);
+    //&------
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){ 
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+//&-----------------------------------------------------------
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/mutex_spinlock.h b/user/mutex_spinlock.h
new file mode 100644
index 0000000..a7c94aa
--- /dev/null
+++ b/user/mutex_spinlock.h
@@ -0,0 +1,103 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+//&_spin_lcok---------------------------------
+
+struct spinlock
+{   
+    uint locked;   
+    int pid;      //& pid instead of CPU
+};
+
+void
+spin_init(struct spinlock *lk)
+{
+  lk->locked = 0;
+  lk->pid = -1;
+}
+
+int
+spin_holding(struct spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->pid == getpid());
+  return r;
+}
+
+//&Acquire the spin lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct spinlock *lk)
+{
+  if(spin_holding(lk))
+    printf("thread_spin_lock acquire");
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+  __sync_synchronize();
+  //&_pid_instead of CPU ID----
+  lk->pid = getpid();
+  //&--------------------------
+}
+
+//&Release the spin lock.
+void
+thread_spin_unlock(struct spinlock *lk)
+{
+  if(!spin_holding(lk))
+    printf("thread_spin_lock release");
+  lk->pid = -1;
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+
+
+//&_mutex_lock--------------------------------
+
+struct mutex
+{
+    uint locked;   
+    int pid; //&pid instead of CPU
+};
+
+void
+mutex_init(struct mutex *lk)
+{
+  lk->locked = 0;
+  lk->pid = -1;
+}
+
+int
+mutex_holding(struct mutex *lk)
+{
+  int r = 0;
+  r = (lk->locked && lk->pid == getpid());
+  return r;
+}
+
+//&Acquire the mutex lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_mutex_lock(struct mutex *lk)
+{
+    if(mutex_holding(lk))
+        printf("thread_mutex_lock acquire");
+    while(__sync_lock_test_and_set(&lk->locked, 1) != 0){
+        sleep(10);
+    }
+    __sync_synchronize();
+    //&_pid_instead of CPU ID-----
+    lk->pid = getpid();
+    //&---------------------------
+}
+
+//&Release the mutex lock.
+void
+thread_mutex_unlock(struct mutex *lk)
+{
+  if(!mutex_holding(lk))
+    printf("thread_mutex_lock release");
+  lk->pid = -1;
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..612ca2c
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,89 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/mutex_spinlock.h"
+
+struct spinlock lock;
+struct mutex mlock;
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+
+    //&synchronizing printf
+    thread_spin_lock(&lock);
+    // thread_mutex_lock(&mlock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+    // thread_mutex_unlock(&mlock);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         // thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&lock);
+          thread_mutex_unlock(&mlock);
+
+    }
+  
+    //&synchronizing printf
+    thread_spin_lock(&lock);
+    // thread_mutex_lock(&mlock);
+    printf( "Done s:%x\n", b->name);
+    thread_spin_unlock(&lock);
+    // thread_mutex_unlock(&mlock);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+//&--initialization of the locks---------
+  spin_init(&lock);
+  mutex_init(&mlock);
+//&-------------------------------------
+
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..20a21c9 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+//&---------------------------------------------
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+//&----------------------------------------------
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..5c6bc71 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
\ No newline at end of file
