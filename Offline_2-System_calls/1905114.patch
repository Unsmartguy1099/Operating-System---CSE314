diff --git a/Makefile b/Makefile
index 39a99d7..a3414d4 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..06d96ca 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -186,4 +186,4 @@ void            virtio_disk_rw(struct buf *, int);
 void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..06b8d45 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -322,6 +322,8 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  np->traceId = p->traceId;
+
   return pid;
 }
 
@@ -681,3 +683,4 @@ procdump(void)
     printf("\n");
   }
 }
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..aa1ca53 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int traceId;                 // --Tracing system call
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..014c002 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);//tracing system call
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +127,16 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace, //tracing system call
 };
-
+//------------
+static char *syscallName[]={
+    "","fork","exit","wait","pipe","read","kill","exec",
+    "fstat","chdir","dup","getpid","sbrk","sleep","uptime",
+    "open","write","mknod","unlink","link","mkdir","close",
+    "trace","sysinfo"
+  };
+//------------
 void
 syscall(void)
 {
@@ -135,10 +144,90 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    //-----------
+   if( p->traceId == num ){
+
+    if(num == SYS_read || num == SYS_write){
+
+      int a,b;
+      uint64 pt;
+      argint(0,&a);
+      argint(2,&b);
+      argaddr(1,&pt);
+      printf("pid: %d, syscall: %s, args: (%d, %p, %d), return: %d\n",p->pid,syscallName[num],a,pt,b,p->trapframe->a0);
+
+    }else if( num == SYS_fork || num == SYS_getpid || num == SYS_uptime){
+    
+      printf("pid: %d, syscall: %s, args: (), return: %d\n",p->pid,syscallName[num],p->trapframe->a0);
+
+    }else if( num == SYS_exit || num == SYS_close || num == SYS_kill || num == SYS_dup || num == SYS_sbrk || num == SYS_sleep || num == SYS_trace){
+
+      int a;
+      argint(0,&a);
+      printf("pid: %d, syscall: %s, args: (%d), return: %d\n",p->pid,syscallName[num],a,p->trapframe->a0);
+
+    }else if( num == SYS_pipe || num == SYS_wait ){
+    
+      uint64 pt;
+      argaddr(0,&pt);
+      printf("pid: %d, syscall: %s, args: (%p), return: %d\n",p->pid,syscallName[num],pt,p->trapframe->a0);
+
+    }else if( num == SYS_exec){
+      
+      char* path="";
+      uint64 uargv;
+      argstr(0, path, MAXPATH);
+      argaddr(1, &uargv);
+      printf("pid: %d, syscall: %s, args: (%s, %p), return: %d\n",p->pid,syscallName[num],path,uargv,p->trapframe->a0);
+
+    }else if( num == SYS_open ){
+
+      char  *path="";
+      int a;
+      argint(1,&a);
+      argstr(0, path, MAXPATH);
+      printf("pid: %d, syscall: %s, args: (%s, %d), return: %d\n",p->pid,syscallName[num],path,a,p->trapframe->a0);
+
+    }else if( num == SYS_mknod ){
+
+      char* path="";
+      int a,b;
+      argint(1,&a);
+      argint(2,&b);
+      argstr(0, path, MAXPATH);
+      printf("pid: %d, syscall: %s, args: (%s, %d, %d), return: %d\n",p->pid,syscallName[num],path,a,b,p->trapframe->a0);
+
+    }else if(num == SYS_unlink || num ==SYS_chdir || num == SYS_mkdir ){
+
+      char* path="";
+      argstr(0, path, MAXPATH);
+      printf("pid: %d, syscall: %s, args: (%s), return: %d\n",p->pid,syscallName[num],path,p->trapframe->a0);
+
+    }else if( num == SYS_fstat){
+
+      int f;
+      uint64 st;
+      argaddr(1, &st);
+      argint(0,&f);
+      printf("pid: %d, syscall: %s, args: (%d, %p), return: %d\n",p->pid,syscallName[num],f,st,p->trapframe->a0);
+
+    }else if( num == SYS_link ){
+
+      char*  path1="";
+      argstr(0, path1, MAXPATH);
+      char* path2="";
+      argstr(0, path2, MAXPATH);
+      printf("pid: %d, syscall: %s, args: (%s, %s), return: %d\n",p->pid,syscallName[num],path1,path2,p->trapframe->a0);
+
+    }
+  }
+    //-------------
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..93230a1 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22 //tracing system call
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..acc2f47 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,16 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//tracing system call
+uint64
+sys_trace(void)
+{
+  int tracerId;
+  argint(0,&tracerId);
+  if( tracerId < 0)
+    return -1;
+
+  myproc()->traceId = tracerId;
+  return 0;
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..57c07bd 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);//tracing system call
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..69507a8 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace"); #tracing system call
