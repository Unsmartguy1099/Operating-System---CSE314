diff --git a/Makefile b/Makefile
index 39a99d7..aa8be30 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,8 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/rand.o \
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..a0055a9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,7 +106,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-
+//&Offline_3------------------------------------
+int             settickets(int);
+int             getpinfo(uint64);
+//&---------------------------------------------
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -187,3 +190,7 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+//&Offline_3----------------------------------
+long genrand(int);
+//&------------------------------------------
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..545b6bf 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define TIME_LIMIT_1 1 //queue 1 lottery
+#define TIME_LIMIT_2 2 //queue 2 Round Robin
+#define BOOST_INTERVAL 64 //priority boosting time interval
+#define DEFAULT_TICKET_COUNT 10 //
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..43b5097 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +125,12 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  //&Offline_3-----------------------------------
+  p->tickets_original = DEFAULT_TICKET_COUNT; 
+  p->tickets_current = DEFAULT_TICKET_COUNT; 
+  p->time_slices = 0;
+  p->inQ = 1;
+  //&--------------------------------------------
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -318,10 +325,22 @@ fork(void)
   np->parent = p;
   release(&wait_lock);
 
+//&Offline_3----------------------------------------
+  acquire(&p->lock);
+  int temp_ticket = p->tickets_original;
+  release(&p->lock);
+
   acquire(&np->lock);
+  np->tickets_original = temp_ticket; 
+  np->tickets_current = temp_ticket;
+  np->time_slices = 0;
+  np->inQ = 1;
+//&Ofline_3-----------------------------------------
+
   np->state = RUNNABLE;
   release(&np->lock);
-
+ // np->tickets_original = p->tickets_original; // setting tickets for baccha kaccha
+ // np->tickets_current = np->tickets_original;
   return pid;
 }
 
@@ -451,23 +470,63 @@ scheduler(void)
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
+//&Offline_3-----------------------------------------
+    int remaining_tickets=0;
+    for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if( p->state == RUNNABLE )
+      remaining_tickets=remaining_tickets+p->tickets_current;
+    release(&p->lock);
+    }
 
+    if(remaining_tickets==0){
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+          p->tickets_current = p->tickets_original;
+        release(&p->lock);
+      }
+    }
+
+    int rand = genrand(remaining_tickets)+1;
+    int ticket_sum=0;
+    int exit=0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
+        ticket_sum=ticket_sum+p->tickets_current;
+        if((rand<=ticket_sum) && (rand>ticket_sum-p->tickets_current) && exit==0){
+        p->tickets_current-=1;
+        p->time_slices+=1;
+       //common------------------------
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
         c->proc = 0;
+        exit=1;
+       //------------------------------
+        }
       }
       release(&p->lock);
     }
+
+    // for(p = proc; p < &proc[NPROC]; p++) {
+    //   acquire(&p->lock);
+    //   if(p->state == RUNNABLE) {
+    //     // Switch to chosen process.  It is the process's job
+    //     // to release its lock and then reacquire it
+    //     // before jumping back to us.
+    //     p->state = RUNNING;
+    //     c->proc = p;
+    //     swtch(&c->context, &p->context);
+
+    //     // Process is done running for now.
+    //     // It should have changed its p->state before coming back.
+    //     c->proc = 0;
+    //   }
+    //   release(&p->lock);
+    // }
+
+  //&-----------------------------------------------------
   }
 }
 
@@ -681,3 +740,38 @@ procdump(void)
     printf("\n");
   }
 }
+
+//&Offline_3-------------------------
+int settickets(int ticket_cnt){
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->tickets_original = ticket_cnt;
+  p->tickets_current = ticket_cnt;
+  p->time_slices = 0;
+  release(&p->lock);
+  return 0;
+}
+
+int getpinfo(uint64 addr){
+
+  struct proc *mp = myproc();
+  struct proc *p;
+  struct pstat Pstat;
+  int i=0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    Pstat.pid[i] = p->pid;
+    Pstat.inuse[i] = p->state != UNUSED;
+    Pstat.tickets_original[i] = p->tickets_original;
+    Pstat.tickets_current[i] = p->tickets_current;
+    Pstat.time_slices[i] = p->time_slices;
+    Pstat.inQ[i] = p->inQ;
+    release(&p->lock);
+    i++;
+  }
+  if(copyout(mp->pagetable, addr, (char *)&Pstat, sizeof(Pstat)) < 0)
+    return -1;
+  return 0;
+}
+
+//&----------------------------------
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..48244bf 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  //&Offline_3-------------------------
+  int tickets_original;
+  int tickets_current;
+  int time_slices;
+  int inQ;
+  //&----------------------------------
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..de941fd
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+#endif // _PSTAT_H_
diff --git a/kernel/rand.c b/kernel/rand.c
new file mode 100644
index 0000000..617899e
--- /dev/null
+++ b/kernel/rand.c
@@ -0,0 +1,115 @@
+/* A C-program for MT19937: Real number version  (1998/4/6)    */
+/*   genrand() generates one pseudorandom real number (double) */
+/* which is uniformly distributed on [0,1]-interval, for each  */
+/* call. sgenrand(seed) set initial values to the working area */
+/* of 624 words. Before genrand(), sgenrand(seed) must be      */
+/* called once. (seed is any 32-bit integer except for 0).     */
+/* Integer generator is obtained by modifying two lines.       */
+/*   Coded by Takuji Nishimura, considering the suggestions by */
+/* Topher Cooper and Marc Rieffel in July-Aug. 1997.           */
+
+/* This library is free software; you can redistribute it and/or   */
+/* modify it under the terms of the GNU Library General Public     */
+/* License as published by the Free Software Foundation; either    */
+/* version 2 of the License, or (at your option) any later         */
+/* version.                                                        */
+/* This library is distributed in the hope that it will be useful, */
+/* but WITHOUT ANY WARRANTY; without even the implied warranty of  */
+/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.            */
+/* See the GNU Library General Public License for more details.    */
+/* You should have received a copy of the GNU Library General      */
+/* Public License along with this library; if not, write to the    */
+/* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA   */
+/* 02111-1307  USA                                                 */
+
+/* Copyright (C) 1997 Makoto Matsumoto and Takuji Nishimura.       */
+/* When you use this, send an email to: matumoto@math.keio.ac.jp   */
+/* with an appropriate reference to your work.                     */
+
+/* REFERENCE                                                       */
+/* M. Matsumoto and T. Nishimura,                                  */
+/* "Mersenne Twister: A 623-Dimensionally Equidistributed Uniform  */
+/* Pseudo-Random Number Generator",                                */
+/* ACM Transactions on Modeling and Computer Simulation,           */
+/* Vol. 8, No. 1, January 1998, pp 3--30.                          */
+
+// #include<stdio.h>
+
+/* Period parameters */
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+#define RAND_MAX 0x7fffffff
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+static int set = 0;
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(seed)
+    unsigned long seed;
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long  /* for integer generation */
+genrand(int upper)
+{
+    if( set == 0 ){
+        sgenrand(4357);
+        set = 1;
+    }
+
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+   // int mx = 1000;
+   // double val1 = ( (double)y * 2.3283064370807974e-10 );
+   // int val2 = val1*mx;
+   // return val2;
+    //return ( (double)y * 2.3283064370807974e-10 ); /* reals */
+    y = y & RAND_MAX;
+    y = y % upper;
+     return y;  /* for integer generation */
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..cd2b52c 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,7 +101,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+//&Offline_3----------------------------
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
+//&-------------------------------------
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,6 +129,10 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+//&Offline_3-------------------------
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]     sys_getpinfo,
+//&----------------------------------
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..32fdf0e 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+//&Offline_3------------------
+#define SYS_settickets  22
+#define SYS_getpinfo    23
+//&---------------------------
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8377087 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,7 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
-
+#include "pstat.h"
 uint64
 sys_exit(void)
 {
@@ -89,3 +89,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+//&Offline_3------------------------------------------
+uint64
+sys_settickets(void){
+  int ticket_cnt;
+  argint(0,&ticket_cnt);
+
+  if(ticket_cnt == 0){
+    return settickets(1);
+  }else if(ticket_cnt < 0){
+    return -1;
+  }else{
+    return settickets(ticket_cnt);
+  }
+  return 0;
+}
+
+uint64
+sys_getpinfo(void){
+  uint64 addr;
+  argaddr(0, &addr);
+  if( addr < 0 )
+    return -1;
+  return getpinfo(addr);
+}
+//&------------------------------------------------
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..4134ea4
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,15 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc,char *argv[]){
+    int ticket = atoi(argv[1]);
+    if (settickets(ticket) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    if( fork() == 0 ){
+        while(1);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..62159a0
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,16 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+int main(int argc,char *argv[]){
+    struct pstat Pstat;
+    if (getpinfo(&Pstat) < 0) {
+        fprintf(2, "%s: exec failed\n", argv[0]);
+        exit(1);
+    }
+    printf("PID | In Use | inQ | Original Tickets | Current Tickets | Time Slices\n");
+    for(int i=0;i<NPROC;i++){
+        printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n",Pstat.pid[i],Pstat.inuse[i],Pstat.inQ[i],Pstat.tickets_original[i],Pstat.tickets_current[i],Pstat.time_slices[i]);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..8357bc5 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat; //offline 3
 
 // system calls
 int fork(void);
@@ -22,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+//&Offline_3-----------------------------
+int settickets(int);
+int getpinfo(struct pstat*);
+//&-------------------------------------
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
